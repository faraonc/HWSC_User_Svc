# Runs for every pull request on master
# Sets up a Go environment
# Runs all unit tests on hwsc-user-svc
# Displays unit test results and code coverages
# Tests main.go executable build
# Tests docker image build (Dockerfile)
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# runs tests/builds on merge to master
trigger: none

# runs tests/builds on PULL REQUEST master
pr:
  - master

pool:
  vmImage: 'Ubuntu-16.04'

variables:
  - group: hwsc-dev-container-vars # name of variable group file that contains docker hub user/email/image-names
  - name: GOBIN # Go binaries path
    value: '$(GOPATH)/bin'
  - name: GOROOT  # Go installation path
    value: '/usr/local/go1.11'
  - name: GOPATH # Go workspace path
    value: '$(system.defaultWorkingDirectory)/gopath'
  - name: modulePath # Path to the module's code
    value: '$(GOPATH)/src/github.com/$(build.repository.name)'

steps:
  - script: printenv
    displayName: 'Print Environment Variables'

  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'

  - script: go get -v -t -d ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Go Get Dependencies'

  - script: |
      export hosts_postgres_host="localhost"
      export hosts_postgres_db="test_user_svc"
      export hosts_postgres_user="postgres"
      export hosts_postgres_password="secret"
      export hosts_postgres_sslmode="disable"
      export hosts_postgres_port="5432"
      export hosts_smtp_host="smtp.gmail.com"
      export hosts_smtp_port="587"
      export hosts_smtp_username="hwsc.test@gmail.com"
      export hosts_smtp_password="ftbsflgbewdpzzmo"
      go test -v -cover -failfast -race ./...
      go get github.com/jstemmer/go-junit-report
      go get github.com/axw/gocov/gocov
      go get github.com/AlekSi/gocov-xml
      go test -coverprofile=coverage.out -v -race -covermode atomic ./... 2>&1 | go-junit-report > report.xml
      gocov convert coverage.out | gocov-xml > coverage.xml
      mkdir -p coverage/official-tool
      go tool cover -html=coverage.out -o coverage/official-tool/coverage.html
      go get -u github.com/matm/gocov-html
      gocov convert coverage.out > coverage.json
      gocov-html < coverage.json > coverage/index.html
    workingDirectory: '$(modulePath)'
    displayName: 'Run Unit Tests'

  - task: PublishTestResults@2
    inputs:
      testRunner: JUnit
      testResultsFiles: $(System.DefaultWorkingDirectory)/**/report.xml

  - task: PublishCodeCoverageResults@1
    inputs:
      codeCoverageTool: Cobertura
      summaryFileLocation: $(System.DefaultWorkingDirectory)/**/coverage.xml
      reportDirectory: $(System.DefaultWorkingDirectory)/**/coverage

  - script: go build -v .
    workingDirectory: '$(modulePath)'
    displayName: 'Go Executable Build Test'

  - task: DownloadSecureFile@1
    inputs:
      secureFile: hwscdevcontainer_pw.txt # contains password for hwsc docker hub
  - script: |
      cat $(Agent.TempDirectory)/hwscdevcontainer_pw.txt | docker login -u "$(hwscDevContainerUser)" --password-stdin
      docker build --no-cache -f Dockerfile -t hwsc/$(hwscDevImageNameUserSvc):$(build.buildId) .
    workingDirectory: '$(modulePath)'
    displayName: 'Build Docker Image Test'

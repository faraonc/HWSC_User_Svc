# Docker image
# Build a Docker image to deploy, run, or push to a container registry.
# Add steps that use Docker Compose, tag images, push to a registry, run an image, and more:
# https://docs.microsoft.com/azure/devops/pipelines/languages/docker

# runs tests/builds on merge to master
trigger:
  - master

# runs tests/builds on PULL REQUEST master
pr:
  - master

# determine your virtual machine image
# each time pipeline is ran, you get a fresh Linux virtual machine
# this vm is discarded after each build
# a Microsoft-hosted Linux agent in Azure pipelines have Docker pre-installed on them
pool:
  vmImage: 'Ubuntu-16.04'

# variables group
# Referencing from Azure DevOps > Pipelines > Library > "Variable Groups" tab
# these group variables can be accessed as $(variable_name)
variables:
  - group: hwsc-dev-container-vars # name of variable group file that contains docker hub user/email/image-names
  - name: GOBIN # Go binaries path
    value: '$(GOPATH)/bin'
  - name: GOROOT  # Go installation path
    value: '/usr/local/go1.11'
  - name: GOPATH # Go workspace path
    value: '$(system.defaultWorkingDirectory)/gopath'
  - name: modulePath # Path to the module's code
    value: '$(GOPATH)/src/github.com/$(build.repository.name)'

# task: DownloadSecureFile@1
# download a Secure File to a temporary location on build or release agent
# Secure Files is referenced from Azure DevOps > Pipelines > Library > "Secure Files" tab
# once downloaded, the Secure File is located in $(Agent.TempDirectory) directory of Azure Pipelines Agent
# selected secure files are deleted after the build or release is finished
steps:
  - script: |
      mkdir -p '$(GOBIN)'
      mkdir -p '$(GOPATH)/pkg'
      mkdir -p '$(modulePath)'
      shopt -s extglob
      mv !(gopath) '$(modulePath)'
      echo '##vso[task.prependpath]$(GOBIN)'
      echo '##vso[task.prependpath]$(GOROOT)/bin'
    displayName: 'Set up the Go workspace'

  - script: go get -v -t -d ./...
    workingDirectory: '$(modulePath)'
    displayName: 'Go Get Dependencies'

  - script: |
      export hosts_postgres_host="localhost"
      export hosts_postgres_db="test_user_svc"
      export hosts_postgres_user="postgres"
      export hosts_postgres_password="secret"
      export hosts_postgres_sslmode="disable"
      export hosts_postgres_port="5432"
      export hosts_smtp_host="smtp.gmail.com"
      export hosts_smtp_port="587"
      export hosts_smtp_username="hwsc.test@gmail.com"
      export hosts_smtp_password="ftbsflgbewdpzzmo"
      go test -v -cover -failfast -race ./...
      go get github.com/jstemmer/go-junit-report
      go get github.com/axw/gocov/gocov
      go get github.com/AlekSi/gocov-xml
      go test -coverprofile=coverage.out -v -race -covermode atomic ./... 2>&1 | go-junit-report > report.xml
      gocov convert coverage.out | gocov-xml > coverage.xml
      mkdir -p coverage/official-tool
      go tool cover -html=coverage.out -o coverage/official-tool/coverage.html
      go get -u github.com/matm/gocov-html
      gocov convert coverage.out > coverage.json
      gocov-html < coverage.json > coverage/index.html
    workingDirectory: '$(modulePath)'
    displayName: 'Run Unit Tests'

  - task: DownloadSecureFile@1
    inputs:
      secureFile: hwscdevcontainer_pw.txt # contains password for hwsc docker hub
  - script: |
      cat $(Agent.TempDirectory)/hwscdevcontainer_pw.txt | docker login -u "$(hwscDevContainerUser)" --password-stdin
      docker build --no-cache -f Dockerfile -t hwsc/$(hwscDevImageNameUserSvc):$(build.buildId) .
    workingDirectory: '$(modulePath)'
    displayName: 'Build Docker Image'

  - script: |
      docker tag $(hwscDevImageNameUserSvc) hwsc/$(hwscDevImageNameUserSvc):$(build.buildId)
      docker push hwsc/$(hwscDevImageNameUserSvc):$(build.buildId)
    workingDirectory: '$(modulePath)'
    displayName: 'Push Docker Image'
